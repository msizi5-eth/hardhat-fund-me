{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef632aecb0849be44be2f9a35c73c3f06913346bef3acabdd909e16bb6daeaea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1063272",
    "logsBloom": "0x
    "blockHash": "0xb6e12319b534c903078767eb0802b705f5a48e07d12eefa353ad577811b0b902",
    "transactionHash": "0xef632aecb0849be44be2f9a35c73c3f06913346bef3acabdd909e16bb6daeaea",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1063272",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "41303369a12834305d3ca5470d2efa70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"_______\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// When following the Solidity style guide, errors should be directly after the imports\\n// section. i.e. This is not included in the official documentation.\\nerror FundMe__NotOwner();\\n\\n// NatSpec is useful for autogenerating docx.\\n/**@title A contract for crowd funding\\n * @author Patrick Collins\\n * @notice _______\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // We use the 's_.....' naming convention to signal where the variable is going to be\\n    // stored.\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    // When we use the same contract on different chains, the data feeds will all be different.\\n    // To account for this, we'll modularise the contract by allowing it to create different\\n    // interfaces for each chain it's deployed on.\\n\\n    // First we create the variable:\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Then we pass the address of the chain's data aggregator in the constructor so that it\\n    // pulls from the correct source.\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // This withdraw function is computationally expensive. The SSTORE (~20,000) and SLOAD (~8,000) opcodes are\\n    // some of the most expensive computations that can be performed in a transaction.abi\\n\\n    // In this particular transaction, we complete computations involving these opcodes multiple times.\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // Instead of storing/reading the array in Storage, we can opt to do so in Memory.\\n        address[] memory funders = s_funders;\\n\\n        // mappings can't be stored in memory.\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"ETH not sent.\\\");\\n    }\\n\\n    // Variables don't all need to be set as public, some can be set as private. When doing so, you then\\n    // have to create corresponding getter functions that allow you to retrieve all that information.\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xc983dd2c7ba6020d0ea496517ee9afb5b5a0e5e255f304db3685d772c8f7702b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xc56f2066de4c6356062d588b941fdc22dd5ba487d878419533138a6f60770319\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200136638038062001366833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111e0620001866000396000818161022b0152818161047a0152818161060401526107fa01526111e06000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aac565b610199565b6040516100b49190610af2565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b39565b6101e1565b6040516100f19190610b75565b60405180910390f35b610102610229565b005b34801561011057600080fd5b50610119610469565b6040516101269190610af2565b60405180910390f35b34801561013b57600080fd5b50610144610476565b6040516101519190610b75565b60405180910390f35b34801561016657600080fd5b5061016f61049e565b60405161017c9190610bef565b60405180910390f35b61018d6104c8565b005b610197610602565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600182815481106101f7576101f6610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610359576000600182815481106102d4576102d3610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610c68565b9150506102b1565b50600067ffffffffffffffff81111561037557610374610cb1565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600190805190602001906103b99291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e090610d11565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b5050905080610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90610d83565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610507600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b1015610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053f90610def565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105969190610e0f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610687576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561070b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106c1575b5050505050905060005b815181101561079557600082828151811061073357610732610c0a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078d90610c68565b915050610715565b50600067ffffffffffffffff8111156107b1576107b0610cb1565b5b6040519080825280602002602001820160405280156107df5781602001602082028036833780820191505090505b50600190805190602001906107f59291906109a2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083c90610d11565b60006040518083038185875af1925050503d8060008114610879576040519150601f19603f3d011682016040523d82523d6000602084013e61087e565b606091505b50509050806108c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b990610eb1565b60405180910390fd5b5050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610ed1565b6108f59190610f5a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611018565b5050509150506402540be4008161099a9190611093565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a49565b5b6000610ad084828501610a97565b91505092915050565b6000819050919050565b610aec81610ad9565b82525050565b6000602082019050610b076000830184610ae3565b92915050565b610b1681610ad9565b8114610b2157600080fd5b50565b600081359050610b3381610b0d565b92915050565b600060208284031215610b4f57610b4e610a49565b5b6000610b5d84828501610b24565b91505092915050565b610b6f81610a6e565b82525050565b6000602082019050610b8a6000830184610b66565b92915050565b6000819050919050565b6000610bb5610bb0610bab84610a4e565b610b90565b610a4e565b9050919050565b6000610bc782610b9a565b9050919050565b6000610bd982610bbc565b9050919050565b610be981610bce565b82525050565b6000602082019050610c046000830184610be0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610ad9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca657610ca5610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfb600083610ce0565b9150610d0682610ceb565b600082019050919050565b6000610d1c82610cee565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d6d600b83610d26565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dd9601b83610d26565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b6000610e1a82610ad9565b9150610e2583610ad9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5a57610e59610c39565b5b828201905092915050565b7f455448206e6f742073656e742e00000000000000000000000000000000000000600082015250565b6000610e9b600d83610d26565b9150610ea682610e65565b602082019050919050565b60006020820190508181036000830152610eca81610e8e565b9050919050565b6000610edc82610ad9565b9150610ee783610ad9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2057610f1f610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6582610ad9565b9150610f7083610ad9565b925082610f8057610f7f610f2b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610faa81610f8b565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b6000819050919050565b610fe081610fcd565b8114610feb57600080fd5b50565b600081519050610ffd81610fd7565b92915050565b60008151905061101281610b0d565b92915050565b600080600080600060a0868803121561103457611033610a49565b5b600061104288828901610fb8565b955050602061105388828901610fee565b945050604061106488828901611003565b935050606061107588828901611003565b925050608061108688828901610fb8565b9150509295509295909350565b600061109e82610fcd565b91506110a983610fcd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e8576110e7610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112557611124610c39565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116257611161610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119f5761119e610c39565b5b82820290509291505056fea26469706673582212203b5b7442ef74ed8b9107682925c3d14695b92eb4a096c8cdc6a3eabce1d7c36b64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aac565b610199565b6040516100b49190610af2565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b39565b6101e1565b6040516100f19190610b75565b60405180910390f35b610102610229565b005b34801561011057600080fd5b50610119610469565b6040516101269190610af2565b60405180910390f35b34801561013b57600080fd5b50610144610476565b6040516101519190610b75565b60405180910390f35b34801561016657600080fd5b5061016f61049e565b60405161017c9190610bef565b60405180910390f35b61018d6104c8565b005b610197610602565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600182815481106101f7576101f6610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610359576000600182815481106102d4576102d3610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610c68565b9150506102b1565b50600067ffffffffffffffff81111561037557610374610cb1565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600190805190602001906103b99291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e090610d11565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b5050905080610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90610d83565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610507600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b1015610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053f90610def565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105969190610e0f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610687576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561070b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106c1575b5050505050905060005b815181101561079557600082828151811061073357610732610c0a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078d90610c68565b915050610715565b50600067ffffffffffffffff8111156107b1576107b0610cb1565b5b6040519080825280602002602001820160405280156107df5781602001602082028036833780820191505090505b50600190805190602001906107f59291906109a2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083c90610d11565b60006040518083038185875af1925050503d8060008114610879576040519150601f19603f3d011682016040523d82523d6000602084013e61087e565b606091505b50509050806108c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b990610eb1565b60405180910390fd5b5050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610ed1565b6108f59190610f5a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611018565b5050509150506402540be4008161099a9190611093565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a49565b5b6000610ad084828501610a97565b91505092915050565b6000819050919050565b610aec81610ad9565b82525050565b6000602082019050610b076000830184610ae3565b92915050565b610b1681610ad9565b8114610b2157600080fd5b50565b600081359050610b3381610b0d565b92915050565b600060208284031215610b4f57610b4e610a49565b5b6000610b5d84828501610b24565b91505092915050565b610b6f81610a6e565b82525050565b6000602082019050610b8a6000830184610b66565b92915050565b6000819050919050565b6000610bb5610bb0610bab84610a4e565b610b90565b610a4e565b9050919050565b6000610bc782610b9a565b9050919050565b6000610bd982610bbc565b9050919050565b610be981610bce565b82525050565b6000602082019050610c046000830184610be0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610ad9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca657610ca5610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfb600083610ce0565b9150610d0682610ceb565b600082019050919050565b6000610d1c82610cee565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d6d600b83610d26565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dd9601b83610d26565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b6000610e1a82610ad9565b9150610e2583610ad9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5a57610e59610c39565b5b828201905092915050565b7f455448206e6f742073656e742e00000000000000000000000000000000000000600082015250565b6000610e9b600d83610d26565b9150610ea682610e65565b602082019050919050565b60006020820190508181036000830152610eca81610e8e565b9050919050565b6000610edc82610ad9565b9150610ee783610ad9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2057610f1f610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6582610ad9565b9150610f7083610ad9565b925082610f8057610f7f610f2b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610faa81610f8b565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b6000819050919050565b610fe081610fcd565b8114610feb57600080fd5b50565b600081519050610ffd81610fd7565b92915050565b60008151905061101281610b0d565b92915050565b600080600080600060a0868803121561103457611033610a49565b5b600061104288828901610fb8565b955050602061105388828901610fee565b945050604061106488828901611003565b935050606061107588828901611003565b925050608061108688828901610fb8565b9150509295509295909350565b600061109e82610fcd565b91506110a983610fcd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e8576110e7610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112557611124610c39565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116257611161610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119f5761119e610c39565b5b82820290509291505056fea26469706673582212203b5b7442ef74ed8b9107682925c3d14695b92eb4a096c8cdc6a3eabce1d7c36b64736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "_______",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}